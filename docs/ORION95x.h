/*
   This file has been generated by IDA.
   It contains local type definitions from
   ORION95.idb
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

/* 1 */
enum MACRO_DDERR_OUTOFMEMORY
{
  DDERR_OUTOFMEMORY = -2147024882,
  DDERR_OUTOFVIDEOMEMORY = -2005532292,
  DDERR_OVERLAYCANTCLIP = -2005532290,
  DDERR_OVERLAYCOLORKEYONLYONEACTIVE = -2005532288,
  DDERR_PALETTEBUSY = -2005532285,
  DDERR_COLORKEYNOTSET = -2005532272,
  DDERR_SURFACEALREADYATTACHED = -2005532262,
  DDERR_SURFACEALREADYDEPENDENT = -2005532252,
  DDERR_SURFACEBUSY = -2005532242,
  DDERR_CANTLOCKSURFACE = -2005532237,
  DDERR_SURFACEISOBSCURED = -2005532232,
  DDERR_SURFACELOST = -2005532222,
  DDERR_SURFACENOTATTACHED = -2005532212,
  DDERR_TOOBIGHEIGHT = -2005532202,
  DDERR_TOOBIGSIZE = -2005532192,
  DDERR_TOOBIGWIDTH = -2005532182,
};

/* 2 */
enum MACRO_AF
{
  AF_UNSPEC = 0,
  AF_UNIX = 1,
  AF_INET = 2,
  AF_IMPLINK = 3,
  AF_PUP = 4,
  AF_CHAOS = 5,
  AF_NS = 6,
};

/* 3 */
enum MACRO_NSPROTO
{
  NSPROTO_IPX = 1000,
  NSPROTO_SPX = 1256,
  NSPROTO_SPXII = 1257,
};

/* 4 */
enum MACRO_SOCK
{
  SOCK_STREAM = 1,
  SOCK_DGRAM = 2,
  SOCK_RAW = 3,
  SOCK_RDM = 4,
  SOCK_SEQPACKET = 5,
};

/* 5 */
enum MACRO_IPPROTO
{
  IPPROTO_IP = 0,
  IPPROTO_ICMP = 1,
  IPPROTO_IGMP = 2,
  IPPROTO_GGP = 3,
  IPPROTO_TCP = 6,
  IPPROTO_PUP = 12,
  IPPROTO_UDP = 17,
  IPPROTO_IDP = 22,
  IPPROTO_ND = 77,
  IPPROTO_RAW = 255,
  IPPROTO_MAX = 256,
};

/* 6 */
enum MACRO_DDERR_INVALIDPARAMS
{
  DDERR_INVALIDPARAMS = -2147024809,
  DDERR_INVALIDPIXELFORMAT = -2005532527,
  DDERR_INVALIDRECT = -2005532522,
  DDERR_LOCKEDSURFACES = -2005532512,
  DDERR_NO3D = -2005532502,
  DDERR_NOALPHAHW = -2005532492,
  DDERR_NOCLIPLIST = -2005532467,
  DDERR_NOCOLORCONVHW = -2005532462,
  DDERR_NOCOOPERATIVELEVELSET = -2005532460,
  DDERR_NOCOLORKEY = -2005532457,
  DDERR_NOCOLORKEYHW = -2005532452,
  DDERR_NODIRECTDRAWSUPPORT = -2005532450,
  DDERR_NOEXCLUSIVEMODE = -2005532447,
  DDERR_NOFLIPHW = -2005532442,
  DDERR_NOGDI = -2005532432,
  DDERR_NOMIRRORHW = -2005532422,
  DDERR_NOTFOUND = -2005532417,
  DDERR_NOOVERLAYHW = -2005532412,
  DDERR_NORASTEROPHW = -2005532392,
  DDERR_NOROTATIONHW = -2005532382,
  DDERR_NOSTRETCHHW = -2005532362,
  DDERR_NOT4BITCOLOR = -2005532356,
  DDERR_NOT4BITCOLORINDEX = -2005532355,
  DDERR_NOT8BITCOLOR = -2005532352,
  DDERR_NOTEXTUREHW = -2005532342,
  DDERR_NOVSYNCHW = -2005532337,
  DDERR_NOZBUFFERHW = -2005532332,
  DDERR_NOZOVERLAYHW = -2005532322,
  DDERR_OUTOFCAPS = -2005532312,
};

/* 7 */
enum MACRO_DDERR
{
  DDERR_GENERIC = -2147467259,
  DDERR_HEIGHTALIGN = -2005532582,
  DDERR_INCOMPATIBLEPRIMARY = -2005532577,
  DDERR_INVALIDCAPS = -2005532572,
  DDERR_INVALIDCLIPLIST = -2005532562,
  DDERR_INVALIDMODE = -2005532552,
  DDERR_INVALIDOBJECT = -2005532542,
};

/* 8 */
enum MACRO_DDERR_UNSUPPORTED
{
  DDERR_UNSUPPORTED = -2147467263,
  DDERR_UNSUPPORTEDFORMAT = -2005532162,
  DDERR_UNSUPPORTEDMASK = -2005532152,
  DDERR_VERTICALBLANKINPROGRESS = -2005532135,
  DDERR_WASSTILLDRAWING = -2005532132,
  DDERR_XALIGN = -2005532112,
  DDERR_INVALIDDIRECTDRAWGUID = -2005532111,
  DDERR_DIRECTDRAWALREADYCREATED = -2005532110,
  DDERR_NODIRECTDRAWHW = -2005532109,
  DDERR_PRIMARYSURFACEALREADYEXISTS = -2005532108,
  DDERR_NOEMULATION = -2005532107,
  DDERR_REGIONTOOSMALL = -2005532106,
  DDERR_CLIPPERISUSINGHWND = -2005532105,
  DDERR_NOCLIPPERATTACHED = -2005532104,
  DDERR_NOHWND = -2005532103,
  DDERR_HWNDSUBCLASSED = -2005532102,
  DDERR_HWNDALREADYSET = -2005532101,
  DDERR_NOPALETTEATTACHED = -2005532100,
  DDERR_NOPALETTEHW = -2005532099,
  DDERR_BLTFASTCANTCLIP = -2005532098,
  DDERR_NOBLTHW = -2005532097,
  DDERR_NODDROPSHW = -2005532096,
  DDERR_OVERLAYNOTVISIBLE = -2005532095,
  DDERR_NOOVERLAYDEST = -2005532094,
  DDERR_INVALIDPOSITION = -2005532093,
  DDERR_NOTAOVERLAYSURFACE = -2005532092,
  DDERR_EXCLUSIVEMODEALREADYSET = -2005532091,
  DDERR_NOTFLIPPABLE = -2005532090,
  DDERR_CANTDUPLICATE = -2005532089,
  DDERR_NOTLOCKED = -2005532088,
  DDERR_CANTCREATEDC = -2005532087,
  DDERR_NODC = -2005532086,
  DDERR_WRONGMODE = -2005532085,
  DDERR_IMPLICITLYCREATED = -2005532084,
  DDERR_NOTPALETTIZED = -2005532083,
  DDERR_UNSUPPORTEDMODE = -2005532082,
  DDERR_NOMIPMAPHW = -2005532081,
  DDERR_INVALIDSURFACETYPE = -2005532080,
  DDERR_NOOPTIMIZEHW = -2005532072,
  DDERR_NOTLOADED = -2005532071,
  DDERR_NOFOCUSWINDOW = -2005532070,
  DDERR_DCALREADYCREATED = -2005532052,
  DDERR_NONONLOCALVIDMEM = -2005532042,
  DDERR_CANTPAGELOCK = -2005532032,
  DDERR_CANTPAGEUNLOCK = -2005532012,
  DDERR_NOTPAGELOCKED = -2005531992,
  DDERR_MOREDATA = -2005531982,
  DDERR_VIDEONOTACTIVE = -2005531977,
  DDERR_DEVICEDOESNTOWNSURFACE = -2005531973,
};

/* 9 */
#pragma pack(push, 1)
struct _msExcept
{
  int Magic;
  int Count;
  void *InfoPtr;
  int CountDtr;
  void *DtrPtr;
  int _unk[3];
  _msExcInfo Info[];
};
#pragma pack(pop)

/* 10 */
#pragma pack(push, 1)
struct _msExcInfo
{
  int Id;
  void *Proc;
};
#pragma pack(pop)

/* 11 */
#pragma pack(push, 1)
struct tagSIZE
{
  int _cx;
  int cy;
};
#pragma pack(pop)

/* 12 */
#pragma pack(push, 1)
struct WSAData
{
  __int16 wVersion;
  __int16 wHighVersion;
  char szDescription[257];
  char szSystemStatus[129];
  __int16 iMaxSockets;
  __int16 iMaxUdpDg;
  char gap_18A[2];
  void *lpVendorInfo;
};
#pragma pack(pop)

/* 13 */
#pragma pack(push, 1)
struct sockaddr
{
  __int16 sa_family;
  char sa_data[14];
};
#pragma pack(pop)

/* 14 */
#pragma pack(push, 1)
struct fd_set
{
  int fd_count;
  int fd_array[64];
};
#pragma pack(pop)

/* 15 */
#pragma pack(push, 1)
struct timeval
{
  int tv_sec;
  int tv_usec;
};
#pragma pack(pop)

/* 16 */
#pragma pack(push, 1)
struct _WIN32_FIND_DATAA
{
  int dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  int nFileSizeHigh;
  int nFileSizeLow;
  int dwReserved0;
  int dwReserved1;
  char cFileName[260];
  char cAlternateFileName[14];
  char _padding[2];
};
#pragma pack(pop)

/* 17 */
#pragma pack(push, 1)
struct FILETIME
{
  int dwLowDateTime;
  int dwHighDateTime;
};
#pragma pack(pop)

/* 18 */
#pragma pack(push, 1)
struct _FILETIME
{
  int dwLowDateTime;
  int dwHighDateTime;
};
#pragma pack(pop)

/* 19 */
#pragma pack(push, 1)
struct _SYSTEMTIME
{
  __int16 wYear;
  __int16 wMonth;
  __int16 wDayOfWeek;
  __int16 wDay;
  __int16 wHour;
  __int16 wMinute;
  __int16 wSecond;
  __int16 wMilliseconds;
};
#pragma pack(pop)

/* 20 */
#pragma pack(push, 1)
struct _TIME_ZONE_INFORMATION
{
  int Bias;
  __int16 StandardName[32];
  SYSTEMTIME StandardDate;
  int StandardBias;
  __int16 DaylightName[32];
  SYSTEMTIME DaylightDate;
  int DaylightBias;
};
#pragma pack(pop)

/* 21 */
#pragma pack(push, 1)
struct SYSTEMTIME
{
  __int16 wYear;
  __int16 wMonth;
  __int16 wDayOfWeek;
  __int16 wDay;
  __int16 wHour;
  __int16 wMinute;
  __int16 wSecond;
  __int16 wMilliseconds;
};
#pragma pack(pop)

/* 22 */
#pragma pack(push, 1)
struct _SECURITY_ATTRIBUTES
{
  int nLength;
  void *lpSecurityDescriptor;
  int bInheritHandle;
};
#pragma pack(pop)

/* 23 */
#pragma pack(push, 1)
struct _INPUT_RECORD
{
  __int16 EventType;
  char gap_2[2];
  _INPUT_RECORD::$56C9F45CD5AB058B1B4FD5A9AB9216C4 Event;
};
#pragma pack(pop)

/* 24 */
#pragma pack(push, 1)
union _INPUT_RECORD::$56C9F45CD5AB058B1B4FD5A9AB9216C4
{
  KEY_EVENT_RECORD KeyEvent;
  MOUSE_EVENT_RECORD MouseEvent;
  WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
  MENU_EVENT_RECORD MenuEvent;
  FOCUS_EVENT_RECORD FocusEvent;
};
#pragma pack(pop)

/* 25 */
#pragma pack(push, 1)
struct KEY_EVENT_RECORD
{
  int bKeyDown;
  __int16 wRepeatCount;
  __int16 wVirtualKeyCode;
  __int16 wVirtualScanCode;
  _KEY_EVENT_RECORD::$0E79EC4DAC98A4AB202537FA8C3F69FC uChar;
  int dwControlKeyState;
};
#pragma pack(pop)

/* 26 */
#pragma pack(push, 1)
union _KEY_EVENT_RECORD::$0E79EC4DAC98A4AB202537FA8C3F69FC
{
  __int16 UnicodeChar;
  char AsciiChar;
};
#pragma pack(pop)

/* 27 */
#pragma pack(push, 1)
struct MOUSE_EVENT_RECORD
{
  COORD dwMousePosition;
  int dwButtonState;
  int dwControlKeyState;
  int dwEventFlags;
};
#pragma pack(pop)

/* 28 */
#pragma pack(push, 1)
struct COORD
{
  __int16 X;
  __int16 Y;
};
#pragma pack(pop)

/* 29 */
#pragma pack(push, 1)
struct WINDOW_BUFFER_SIZE_RECORD
{
  COORD dwSize;
};
#pragma pack(pop)

/* 30 */
#pragma pack(push, 1)
struct MENU_EVENT_RECORD
{
  int dwCommandId;
};
#pragma pack(pop)

/* 31 */
#pragma pack(push, 1)
struct FOCUS_EVENT_RECORD
{
  int bSetFocus;
};
#pragma pack(pop)

/* 32 */
#pragma pack(push, 1)
struct _finddata_t
{
  int attrib;
  int time_create;
  int time_access;
  int time_write;
  int size;
  char name[260];
};
#pragma pack(pop)

/* 33 */
#pragma pack(push, 1)
struct _diskfree_t
{
  int total_clusters;
  int avail_clusters;
  int sectors_per_cluster;
  int bytes_per_sector;
};
#pragma pack(pop)

/* 34 */
#pragma pack(push, 1)
struct FILE
{
  void *_ptr;
  int _cnt;
  void *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  void *_tmpfname;
};
#pragma pack(pop)

/* 35 */
#pragma pack(push, 1)
struct _timeb
{
  int time;
  __int16 millitm;
  __int16 timezone;
  __int16 dstflag;
  char _padding[2];
};
#pragma pack(pop)

/* 36 */
#pragma pack(push, 1)
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};
#pragma pack(pop)

/* 37 */
#pragma pack(push, 1)
struct _COMSTAT
{
  int fReserved;
  int cbInQue;
  int cbOutQue;
};
#pragma pack(pop)

/* 38 */
#pragma pack(push, 1)
struct _COMMTIMEOUTS
{
  int ReadIntervalTimeout;
  int ReadTotalTimeoutMultiplier;
  int ReadTotalTimeoutConstant;
  int WriteTotalTimeoutMultiplier;
  int WriteTotalTimeoutConstant;
};
#pragma pack(pop)

/* 39 */
#pragma pack(push, 1)
struct MSG
{
  void *hwnd;
  int message;
  int wParam;
  int lParam;
  int time;
  POINT pt;
};
#pragma pack(pop)

/* 40 */
#pragma pack(push, 1)
struct IDirectDraw
{
  void *lpVtbl;
};
#pragma pack(pop)

/* 41 */
#pragma pack(push, 1)
struct IDirectDraw2
{
  void *lpVtbl;
};
#pragma pack(pop)

/* 42 */
#pragma pack(push, 1)
struct IDirect3D2Vtbl
{
  void *QueryInterface;
  void *AddRef;
  void *Release;
  void *EnumDevices;
  void *CreateLight;
  void *CreateMaterial;
  void *CreateViewport;
  void *FindDevice;
  void *CreateDevice;
};
#pragma pack(pop)

/* 43 */
#pragma pack(push, 1)
struct IDirectDrawVtbl
{
  void *QueryInterface;
  void *AddRef;
  void *Release;
  void *Compact;
  void *CreateClipper;
  void *CreatePalette;
  void *CreateSurface;
  void *DuplicateSurface;
  void *EnumDisplayModes;
  void *EnumSurfaces;
  void *FlipToGDISurface;
  void *GetCaps;
  void *GetDisplayMode;
  void *GetFourCCCodes;
  void *GetGDISurface;
  void *GetMonitorFrequency;
  void *GetScanLine;
  void *GetVerticalBlankStatus;
  void *Initialize;
  void *RestoreDisplayMode;
  void *SetCooperativeLevel;
  void *SetDisplayMode;
  void *WaitForVerticalBlank;
};
#pragma pack(pop)

/* 44 */
#pragma pack(push, 1)
struct tagPALETTEENTRY
{
  char peRed;
  char peGreen;
  char peBlue;
  char peFlags;
};
#pragma pack(pop)

/* 45 */
#pragma pack(push, 1)
struct IDirectDrawSurface2Vtbl
{
  void *QueryInterface;
  void *AddRef;
  void *Release;
  void *AddAttachedSurface;
  void *AddOverlayDirtyRect;
  void *Blt;
  void *BltBatch;
  void *BltFast;
  void *DeleteAttachedSurface;
  void *EnumAttachedSurfaces;
  void *EnumOverlayZOrders;
  void *Flip;
  void *GetAttachedSurface;
  void *GetBltStatus;
  void *GetCaps;
  void *GetClipper;
  void *GetColorKey;
  void *GetDC;
  void *GetFlipStatus;
  void *GetOverlayPosition;
  void *GetPalette;
  void *GetPixelFormat;
  void *GetSurfaceDesc;
  void *Initialize;
  void *IsLost;
  void *Lock;
  void *ReleaseDC;
  void *Restore;
  void *SetClipper;
  void *SetColorKey;
  void *SetOverlayPosition;
  void *SetPalette;
  void *Unlock;
  void *UpdateOverlay;
  void *UpdateOverlayDisplay;
  void *UpdateOverlayZOrder;
  void *GetDDInterface;
  void *PageLock;
  void *PageUnlock;
};
#pragma pack(pop)

/* 46 */
#pragma pack(push, 1)
struct tagRECT
{
  int left;
  int top;
  int right;
  int bottom;
};
#pragma pack(pop)

/* 47 */
#pragma pack(push, 1)
struct _DDSURFACEDESC
{
  int dwSize;
  int dwFlags;
  int dwHeight;
  int dwWidth;
  _DDSURFACEDESC::$091DBF7D405BE25E65B16620C008128B lPitch;
  int dwBackBufferCount;
  _DDSURFACEDESC::$9AB659F8D6A45F8C7834A76B9C40973B dwMipMapCount;
  int dwAlphaBitDepth;
  int dwReserved;
  void *lpSurface;
  DDCOLORKEY ddckCKDestOverlay;
  DDCOLORKEY ddckCKDestBlt;
  DDCOLORKEY ddckCKSrcOverlay;
  DDCOLORKEY ddckCKSrcBlt;
  DDPIXELFORMAT ddpfPixelFormat;
  DDSCAPS ddsCaps;
};
#pragma pack(pop)

/* 48 */
#pragma pack(push, 1)
union _DDSURFACEDESC::$091DBF7D405BE25E65B16620C008128B
{
  int lPitch;
  int dwLinearSize;
};
#pragma pack(pop)

/* 49 */
#pragma pack(push, 1)
union _DDSURFACEDESC::$9AB659F8D6A45F8C7834A76B9C40973B
{
  int dwMipMapCount;
  int dwZBufferBitDepth;
  int dwRefreshRate;
};
#pragma pack(pop)

/* 50 */
#pragma pack(push, 1)
struct DDCOLORKEY
{
  int dwColorSpaceLowValue;
  int dwColorSpaceHighValue;
};
#pragma pack(pop)

/* 51 */
#pragma pack(push, 1)
struct DDPIXELFORMAT
{
  int dwSize;
  int dwFlags;
  int dwFourCC;
  _DDPIXELFORMAT::$10AA641B3215541DB69A48A361AE0013 anonymous_0;
  _DDPIXELFORMAT::$0E0BD8DB15B3F2A790C062F781315157 anonymous_1;
  _DDPIXELFORMAT::$DB4BDA43012B420E1DC9AEEACAA267A5 anonymous_2;
  _DDPIXELFORMAT::$4C5EBD389D88C4C046794501FFF390F4 anonymous_3;
  _DDPIXELFORMAT::$3ED4EC923A768B2489A9D1155BD11968 anonymous_4;
};
#pragma pack(pop)

/* 52 */
#pragma pack(push, 1)
union _DDPIXELFORMAT::$10AA641B3215541DB69A48A361AE0013
{
  int dwRGBBitCount;
  int dwYUVBitCount;
  int dwZBufferBitDepth;
  int dwAlphaBitDepth;
};
#pragma pack(pop)

/* 53 */
#pragma pack(push, 1)
union _DDPIXELFORMAT::$0E0BD8DB15B3F2A790C062F781315157
{
  int dwRBitMask;
  int dwYBitMask;
};
#pragma pack(pop)

/* 54 */
#pragma pack(push, 1)
union _DDPIXELFORMAT::$DB4BDA43012B420E1DC9AEEACAA267A5
{
  int dwGBitMask;
  int dwUBitMask;
};
#pragma pack(pop)

/* 55 */
#pragma pack(push, 1)
struct moo2_planet
{
  __int16 colony_link;
  char star_link;
  char orbit;
  char planet_type;
  char planet_size;
  char planet_g;
  char field_7;
  char planet_environment_class;
  char drawing_number;
  char planet_minerall_class;
  char food_base;
  char number_of_teraforms_done;
  char field_D;
  char field_E;
  char planet_special;
  char flags;
};
#pragma pack(pop)

/* 56 */
#pragma pack(push, 1)
union _DDPIXELFORMAT::$4C5EBD389D88C4C046794501FFF390F4
{
  int dwBBitMask;
  int dwVBitMask;
};
#pragma pack(pop)

/* 57 */
#pragma pack(push, 1)
struct moo2_star
{
  char name[15];
  __int16 map_x;
  __int16 map_y;
  char star_size;
  char system_primary_owner;
  char field_15;
  char star_type;
  char field_17[17];
  char system_special;
  char wormhole_leads_to;
  char field_2A[15];
  char System_has_warp_interdictor;
  char field_3A[5];
  char system_has_artemis_net;
  char has_dimensional_portal;
  char field_41[9];
  __int16 planet_1;
  __int16 planet_2;
  __int16 planet_3;
  __int16 planet_4;
  __int16 planet_5;
  __int16 relocation_star_id[8];
  char field_64[13];
};
#pragma pack(pop)

/* 58 */
#pragma pack(push, 1)
union _DDPIXELFORMAT::$3ED4EC923A768B2489A9D1155BD11968
{
  int dwRGBAlphaBitMask;
  int dwYUVAlphaBitMask;
  int dwRGBZBitMask;
  int dwYUVZBitMask;
};
#pragma pack(pop)

/* 59 */
#pragma pack(push, 1)
struct moo2_ship_weapon
{
  __int16 weapon_type;
  char initial_quantity;
  char quantity;
  char firing_arc;
  __int16 weapon_mods;
  char ammo_remaining;
};
#pragma pack(pop)

/* 60 */
#pragma pack(push, 1)
struct moo2_ship
{
  char name[16];
  char ship_type_class;
  char ship_type;
  char shield_type;
  char drive_type;
  char ftl_speed;
  char computer_type;
  char armor_type;
  char specials[5];
  moo2_ship_weapon weapon_slot_1;
  moo2_ship_weapon weapon_slot_2;
  moo2_ship_weapon weapon_slot_3;
  moo2_ship_weapon weapon_slot_4;
  moo2_ship_weapon weapon_slot_5;
  moo2_ship_weapon weapon_slot_6;
  moo2_ship_weapon weapon_slot_7;
  moo2_ship_weapon weapon_slot_8;
  char ship_shape;
  char builder;
  __int16 cost_to_build;
  char combat_speed;
  __int16 build_stardate;
  char current_owner;
  char state_of_ship;
  __int16 destination_star;
  __int16 map_x;
  __int16 map_y;
  char navigator_in_group_flag;
  char group_traveling_speed;
  char ETA_for_group;
  char shield_damage;
  char engine_damage;
  char computer_damage;
  char crew_quality;
  __int16 crew_experience;
  __int16 ship_officer;
  char damage_flags[5];
  __int16 armor_damage;
  __int16 stuctural_damage;
  char ai_mission;
  char just_built_flag;
};
#pragma pack(pop)

/* 61 */
#pragma pack(push, 1)
struct DDSCAPS
{
  int dwCaps;
};
#pragma pack(pop)

